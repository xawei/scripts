#!/bin/bash

# ====== Configurable ======
REGION="ap-southeast-1"          # AWS region
PROFILE="your-profile-name"      # AWS CLI profile
NAMESPACE="default"              # Namespace to inspect

DEPLOYMENTS=()                   # e.g. ("api" "web"), leave empty for all
DAEMONSETS=()                    # e.g. ("fluentd"), leave empty for all
STATEFULSETS=()                  # e.g. ("mysql"), leave empty for all

TMP_KUBECONFIG="/tmp/tmp_kubeconfig_eks"

# ====== Script Begins ======

clusters=$(aws eks list-clusters --region "$REGION" --profile "$PROFILE" --output text --query 'clusters[]')

if [ -z "$clusters" ]; then
  echo "❌ No EKS clusters found in region $REGION using profile $PROFILE."
  exit 1
fi

for cluster in $clusters; do
  echo "==> Cluster: $cluster"

  aws eks update-kubeconfig \
    --region "$REGION" \
    --name "$cluster" \
    --kubeconfig "$TMP_KUBECONFIG" \
    --profile "$PROFILE" \
    > /dev/null

  echo "-- Namespace: $NAMESPACE"

  # === Deployments ===
  echo ">> Deployments"
  if [ ${#DEPLOYMENTS[@]} -eq 0 ]; then
    DEPLOYMENTS=($(kubectl --kubeconfig "$TMP_KUBECONFIG" -n "$NAMESPACE" get deployments -o jsonpath='{.items[*].metadata.name}'))
  fi

  for deploy in "${DEPLOYMENTS[@]}"; do
    image=$(kubectl --kubeconfig "$TMP_KUBECONFIG" -n "$NAMESPACE" get deployment "$deploy" \
      -o jsonpath='{.spec.template.spec.containers[*].image}' 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "  ✅ Deployment: $deploy - Image(s): $image"
    else
      echo "  ❌ Deployment: $deploy not found."
    fi
  done

  # === DaemonSets ===
  echo ">> DaemonSets"
  if [ ${#DAEMONSETS[@]} -eq 0 ]; then
    DAEMONSETS=($(kubectl --kubeconfig "$TMP_KUBECONFIG" -n "$NAMESPACE" get daemonsets -o jsonpath='{.items[*].metadata.name}'))
  fi

  for ds in "${DAEMONSETS[@]}"; do
    image=$(kubectl --kubeconfig "$TMP_KUBECONFIG" -n "$NAMESPACE" get daemonset "$ds" \
      -o jsonpath='{.spec.template.spec.containers[*].image}' 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "  ✅ DaemonSet: $ds - Image(s): $image"
    else
      echo "  ❌ DaemonSet: $ds not found."
    fi
  done

  # === StatefulSets ===
  echo ">> StatefulSets"
  if [ ${#STATEFULSETS[@]} -eq 0 ]; then
    STATEFULSETS=($(kubectl --kubeconfig "$TMP_KUBECONFIG" -n "$NAMESPACE" get statefulsets -o jsonpath='{.items[*].metadata.name}'))
  fi

  for sts in "${STATEFULSETS[@]}"; do
    image=$(kubectl --kubeconfig "$TMP_KUBECONFIG" -n "$NAMESPACE" get statefulset "$sts" \
      -o jsonpath='{.spec.template.spec.containers[*].image}' 2>/dev/null)
    if [ $? -eq 0 ]; then
      echo "  ✅ StatefulSet: $sts - Image(s): $image"
    else
      echo "  ❌ StatefulSet: $sts not found."
    fi
  done

  echo ""
done

# Cleanup
rm -f "$TMP_KUBECONFIG"